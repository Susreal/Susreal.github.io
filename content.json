{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"about","text":"","link":"/about/index.html"},{"title":"留言板","text":"快来nss吧！","link":"/board/index.html"},{"title":"links","text":"","link":"/links/index.html"},{"title":"moment","text":"var content_node = document.getElementsByClassName(\"content\")[0];//momentss.parentNode; var article_node = content_node.parentNode; var card_node = article_node.parentNode; var column_node = card_node.parentNode; var moments_node = document.createElement(\"div\"); var column_counts = 3; if (document.body.clientWidth","link":"/moment/index.html"},{"title":"","text":"[{\"text\":\"有去看皮卡丘的咩~\",\"crt_time\":\"2019-05-11\"},{\"text\":\"🎉 竣工啦！纪念第一条动态~ 瀑布流的代码实在是有点惨不忍睹，就先用着再慢慢迭代吧233333\",\"imageUrl\":\"/moment/images/0.jpeg\",\"crt_time\":\"2019-05-11\"}]","link":"/moment/moments.json"},{"title":"🎡 游乐园","text":"Jike Best Nine🌟 一键生成年度即刻高光九图🛠 since 2018.12 头像挂件君👥 贴纸相框节日限定👈 长按识别进入 外卖券券券🧧 顿顿有红包👈 长按识别进入 我要摇骰子🎲 喝酒聚餐必备👈 长按识别进入 春节祝福语 &amp; 头像表情🐂 拜年小助手👈 长按识别进入","link":"/playground/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"Hexo | 如何将博客部署在云服务器","text":"之前简单介绍了将 Hexo 博客部署在代码托管平台的方法，这一篇介绍一下如何把博客建在自己购买的服务器上。 准备工作 域名，可以在任何一个地方购买 腾讯云服务器，1G1C1M的最基础配置即可 部署步骤登陆云服务器Linux/Mac OS X 系统的电脑可通过密码登陆云服务器： 打开 SSH 客户端（Mac可使用系统自带的终端） 输入 ssh -q -l @User_Name -p 22 @Your_IP_Address 输入 CVM 实例密码进行登录（CVM 实例密码可以在服务器关机时进行修改） 服务器环境准备以 Ubuntu 16.04 LTS 系统为例，这一步主要是在服务器上搭建 Git 和 Nginx 环境，Git 用来部署静态网站内容，Nginx 用来做代理。 Git首先，使用 apt 包管理工具更新本地包。更新完成后，下载并安装Git： sudo apt updatesudo apt install git 完毕后查看版本信息来验证是否正确安装 Git，如果出现版本信息那就安装正确了： git --version Nginx类似的，我们通过以下\b面的命令安装 Nginx： sudo apt updatesudo apt install nginx 博客\b自动发布下面我们要配置博客的 Git 环境，让我们在本地执行 hexo d 的时候直接将静态网站资源上传到云服务器上： 静态网站文件目录新建一个文件夹用于存放我们本地编译生产的静态文件，并修改权限： mkdir /home/hexoBlog/chown -R $USER:$USER /home/hexoBlog/chmod -R 755 /home/hexoBlog/ 服务器设置首先我们创建一个名为 hexoBlog 的裸仓库（bare repo），然后修改目录的所有权和用户权限：\b mkdir /home/git/chown -R $USER:$USER /home/git/chmod -R 755 /home/git/ 随后执行如下命令创建一个裸仓库： cd /home/git/git init --bare hexoBlog.git 然后，创建一个新的 git 钩子文件 post-receive，用于自动部署： vim /home/git/hexoBlog.git/hooks/post-receive 按 i 键编辑，添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件）： #!/bin/bashgit --work-tree=/home/hexoBlog --git-dir=/home/git/hexoBlog.git checkout -f 然后，按 Esc 键退出编辑模式，输入:wq 保存退出。 修改文件权限，使得其可执行： chmod +x /home/git/hexoBlog.git/hooks/post-receive 本地 Hexo 设置在 Hexo 的根目录 _config.yml 文件中添加部署： deploy: type: git repository: cvm: 服务器用户名@服务器IP地址:/home/git/hexoBlog branch: master 这样博客自动发布的环境就配置好了。 服务器 Nginx 配置启动 Nginx 服务首先启动 Nginx 服务： service nginx start 启动服务后，我们测试一下是否正常： wget http://127.0.0.1 在浏览器中打开购买的服务器数字ip地址，如果有 Nginx 相关字样，就说明服务正常啦！ 配置 Nginx 根目录换句话说，就是如何通过 Nginx 找到我们上传到云服务器的静态文件，修改默认配置文件： sudo vim /etc/nginx/sites-available/default 找到如下代码并修改 root 和 server_name： server { listen 80 default_server; listen [::]:80 default_server; root /home/hexoBlog; server_name 你购买的域名; ......} 绑定域名将域名A解析至你购买的服务器ip地址： 现在就算大功告成啦，在本地执行一次 hexo d 后，试试在浏览器中打开你购买的域名，有没有显示你的博客首页！ 强制重定向至https使用代码托管平台的 Pages 服务时，我们可以经常发现一个选项，就是强制使用https访问： 如果我们想在自己的服务器上也这么配置，要怎么做呢？ 购买ssl证书我们可以通过很多地方购买免费ssl证书，购买后我们根据指示进行域名所有权的验证（推荐使用 DNS 验证，只需要配置一个\b TXT 解析即可），验证完成后即可下载 Nginx 版本的证书。证书包含两个文件： .pem文件：证书文件 .key文件：证书的私钥文件 上传ssl证书在本地的终端，将\bssl证书上传到服务器： sudo scp a.pem 用户名@服务器地址:/home/ssl/a.pemsudo scp a.key 用户名@服务器地址:/home/ssl/a.key 修改 Nginx 默认设置修改之前提到的 Nginx 默认设置文件： sudo vim /etc/nginx/sites-available/default 根据自己的实际情况\b监听443端口，添加ssl证书相关内容；并将80端口的http访问重定向到https访问： server { listen 443; root /home/hexoBlog; index index.html index.htm index.nginx-debian.html; server_name 购买的域名; ssl on; ssl_certificate /home/ssl/a.pem; ssl_certificate_key /home/ssl/a.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { try_files $uri $uri/ =404; }}server { listen 80; server_name susreal.com; rewrite ^(.*)$ https://${server_name}$1 permanent;} 以上，就完成了强制通过HTTPS访问的设置。 参考文章 《如何在Ubuntu系统上安装Git》 《如何在CVM上安装Nginx》 《Hexo 教程：Hexo 博客部署到腾讯云教程》 《Nginx/Tengine服务器安装SSL证书》","link":"/article/2019/hexo-cvm/"},{"title":"Hexo | Pages服务速度对比","text":"当我们在本地调试好了博客内容，就需要发布到公网上让更多的人看见我们的辛（wu）苦（liao）\b劳动。网上比较多的是通过 Hexo + Github 来部署自己的博客：通过 Hexo 渲染静态文件，推送到 Github ，借助 Pages 服务来实现博客外部访问。国内的同学们有时候会遇到加载速度较慢的问题，因此我们需要选择一套更好的方案。 提供 Pages 服务的代码托管平台\b国内外提供代码托管的平台非常多，\b其中提供 Pages 服务的主要有： Github 大名鼎鼎的全球同性交友平台 Gitlab Gitee 开源中国旗下的码云 Coding 现在升级为腾讯云代码托管平台 Gitlab 十分特别，它提供的 Pages 服务\b需要用户将构建命令以文件（.gitlab-ci.yml）的形式存储在云端，Gitlab 使用内建工具 GitLab CI/CD 生成静态文件并发布。也就是说，Gitlab 这个方案需要我们把 Hexo 博客整个工程托管在 Gitlab。该方法和其他方法差异较大，因此在下面的文章中，这种方案就不做介绍了。 多仓库部署Hexo 允许用户同时将博客部署在多个仓库中，只需要在博客的 _config.yml 中配置： /_config.ymldeploy: type: git repository: github: https://github.com/Username/Username.github.io.git gitee: https://gitee.com/Username/Username.git coding: https://git.dev.tencent.com/Username/Username.git branch: master 把几个代码托管平台的 Pages 服务设置好，每次只需执行一次 hexo d 就可以将静态页面同时部署在多个平台上。下面我们来一起对比一下这几个平台 Pages 服务的速度。 速度对比首先将博客同时部署在 Github 、 Gitee 和 Coding 上: https://susreal.github.io https://susreal.gitee.io https://susreal.coding.me 网络环境分别采用移动、联通和电信以及美国节点，通过 ping 域名的方式统计网络延迟： 取连续20条延迟的平均值（仅供参考）： - 移动 联通 电信 美国节点 Github 131ms 388ms 245ms 139ms Gitee 22ms 92ms 97ms 59ms Coding 97ms 62ms 584ms 927ms 可以看到，在移动、电信以及美国节点的网络下，Gitee 的访问速度都表现出了明显的优势。测试过程中，Coding 的服务器一度timeout，无法连接。从 Coding 官方的说明来看，由于 Pages 服务\b可以自定义绑定域名，为了实现“免备案”，Coding 把服务器架在了海外，这也可以解释为何 Coding 的访问速度以及访问稳定性稍显逊色。 自定义域名绑定这三个代码托管平台都支持自定义域名绑定，我们可以在万网上购买域名，并解析到对应的平台上。\b首先，我们在 Hexo 工程的 source 目录下添加一个 CNAME 文件（没有后缀名），把购买的域名写在文件中： /source/CNAMEsusreal.com GithubGithub 在 仓库&gt;Settings&gt;GitHub Pages 中绑定域名： 然后在域名的解析中添加两条 CNAME 类型的解析即可： GiteeGitee 的自定义域名需要开启 Gitee Pages Pro 服务，这里划重点，这个服务需要 99 \b元一年！ 如果不开启的话，是无法绑定自定义域名的。我这里是先试用了一个月： \b如果开启强制 https 访问的话需要自己配置\b域名证书，证书是免费的，有效期一年。 最后是同样的一步，在域名解析中添加 CNAME 类型的解析： CodingCoding 的绑定域名服务是全免费的，并且可以申请由 Let’s Encrypt 下发的免费SSL证书，有效期三个月： 总结国内外这三个代码托管平台提供的 Pages 服务，从体验上来看都不错，可以帮助博主快速建站。从网络连接上来看，开源中国下的 Gitee 应该是表现最好的。\b如果需要绑定自己的域名，Gitee 需要额外支付每年 99 元的服务费，考虑到绑定自己的域名以及访问速度两个因素，我个人觉得还是值得的。","link":"/article/2019/hexo-speed-test/"},{"title":"Hexo | icarus主题初体验","text":"Hexo-theme-icarus 是一个优秀的 Hexo 主题，开发者 Ruipeng Zhang 同时还维护了 hexo-theme-hueman 和 hexo-theme-minos 两个项目。 icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。 效果图 安装在命令行中cd至博客根目录，加载主题： git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 基础配置首先，要在博客根目录下的 _config.yml 文件中做两件事情： 设置语言: language: zh-CN 设置主题为 icarus: theme: icarus icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。 icarus 的文件结构先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ ├─includes├─languages├─layout│ ├─comment│ ├─common│ ├─donate│ ├─plugin│ ├─search│ ├─share│ └─widget├─sripts└─source ├─css ├─images └─js 仔细观察渲染文件 layout 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 languages 目录下的 zh-CN.yml 文件。 _config.yml 文件配置首次在博客根目录执行 hexo clean 或者 hexo g 都会触发 icarus 自动生成一个 _config.yml 文件，我们逐一说明。 logologo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 source/images/ 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案： /layout/common/navbar.ejs&lt;% if (has_config('logo.text') &amp;&amp; get_config('logo.text')) { %&gt; &lt;%= get_config('logo.text') %&gt;&lt;% } else { %&gt; &lt;img src=\"&lt;%- url_for(get_config('logo')) %&gt;\" alt=\"&lt;%= get_config('title') %&gt;\" height=\"28\"&gt;&lt;% } %&gt; 也就是说，只要给 logo 添加 text 属性，就会优先展示预设文字作为 logo： logo: text: your name 这对于不会画 logo 的同学来说无疑是个大好消息了： 评论系统icarus 预置了 Changyan Disqus Facebook Gitment Gitalk Isso LiveRe 和 Valine 八大主流评论插件。 这里以我使用的 Valine 为例。首先在 LeanCloud 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分： comment: type: valine app_id: # (required) LeanCloud application id app_key: # (required) LeanCloud application key notify: # (optional) receive email notification verify: # (optional) show verification code placeholder: # (optional) comment box placeholder text 其余的三项选填，这样就完成了 Valine 的基本配置了。此外，Valine 同步 Gravatar 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！ 效果如下： 如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置 comments 为 false 即可： ---title: article titlecomments: false--- 打赏作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 支付宝 微信 PayPal 和 Patreon 四种方式： donate: - type: alipay qrcode: /images/alipay.JPG - type: wechat qrcode: /images/wechat.JPG - # type: paypal # Paypal business ID or email address # business: '' # Currency code # currency_code: USD - # type: patreon # URL to the Patreon page # url: '' 支付宝 和 微信 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的： widget我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，\b可以自由摆放在任何位置： 包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 _config.yml 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧： widgets: - # Widget name type: tagcloud # Where should the widget be placed, left or right position: left 其他设置（置顶/阅读量统计）还有一些其他的设置就不在这里赘述了，具体可以参考 官方文档 进行了解。 除此之外，我根据实际需求，在 icarus 主题内添加了 置顶文章 和 阅读量统计 的两个小功能，大家如果有兴趣，欢迎随时和我交流喔:-O","link":"/article/2019/hexo-theme-icarus-1/"},{"title":"头像挂件君 | 小程序诞生记","text":"2020年的开年是一个艰难的开年，武汉新型冠状病毒疫情蔓延，很多人的春节过得并不像往年的顺利。为了提醒自己出门戴好口罩，很多同学纷纷给自己的头像加上了口罩的贴纸。在鼠年来临之际，我赶制了一个小程序 —— 头像挂件君。也衷心希望大家可以早日度过难关！ 大家可以扫描封面图片的小程序码，或者在微信中搜索【头像挂件君】体验 小程序只有一个页面，步骤参照上图就好啦，授权/上传 - 加贴纸 - 调整位置和大小 - 导出~ 近期爆发肺炎疫情 希望大家能照顾好自己 出门记得戴口罩呀 加油武汉，加油中国！ 春天马上就要到了，很快就会好 嗯","link":"/article/2020/miniprogram/"},{"title":"Hexo | 初识icarus主题中的Bulma框架","text":"icarus 主题采用了 Bulma 框架，实现布局的自适应。Bulma 将一块屏幕横向分成12份，大家各取所需共同分割12份的财产。这篇文章就借着调教（shi）icarus 主题的机会，简单学习一下强大的 Bulma 框架。 icarus 默认的两列样式如下图所示： 个人觉得右侧的资料等 widget 宽度太宽了，影响了正文部分的阅读体验。所以这次的探索之旅目标就是：调整插件宽度！ 首先，我们找到 icarus 主题设置 Widget 和 Post 宽度的代码： /themes/icarus/layout/common/widget.ejsswitch (column_count()) { case 2: return 'is-4-tablet is-4-desktop is-4-widescreen'; case 3: return 'is-4-tablet is-4-desktop is-3-widescreen';}return '';/themes/icarus/layout/layout.ejsswitch (column_count()) { case 1: return 'is-12'; case 2: return 'is-8-tablet is-8-desktop is-8-widescreen'; case 3: return 'is-8-tablet is-8-desktop is-6-widescreen' (意外发现源码少了个分号lol)}return ''; icarus 可以设置资料、toc、归档等等插件在文章的左侧或者右侧。也就是说，包括插件和文章在内，列数在1~3列不等： 无插件的时候，为1列； 插件统一在左侧或右侧时，为2列； 插件左、右侧都有时，为3列。 Bulma 引擎将屏幕横向分为12份，所有元素按照自己的需求使用即可。 通过 widget.ejs 文件，我们可以看到，对于插件而言： 如果屏幕分为2列，则插件的宽度为 is-4-widescreen，也即是4/12=33.33%的宽度； 如果屏幕分为3列，则插件的宽度为 is-3-widescreen，也即是3/12=25%的宽度，两列插件占了50%宽。 同样的，layout.ejs 文件针对文章也做了宽度限制： 如果屏幕分为1列，则文章的宽度为 is-12，也即是12/12=100%的宽度； 如果屏幕分为2列，则文章的宽度为 is-8-widescreen，也即是8/12=66.66%的宽度； 如果屏幕分为3列，则文章的宽度为 is-6-widescreen，也即是6/12=50%的宽度。 那么调整插件宽度的方法也就差不多想出来啦！修改代码如下： /themes/icarus/layout/common/widget.ejsswitch (column_count()) { case 2: return 'is-4-tablet is-4-desktop is-3-widescreen'; case 3: return 'is-4-tablet is-4-desktop is-2-widescreen';}return '';/themes/icarus/layout/layout.ejsswitch (column_count()) { case 1: return 'is-12'; case 2: return 'is-8-tablet is-8-desktop is-9-widescreen'; case 3: return 'is-8-tablet is-8-desktop is-8-widescreen';}return ''; 看看效果吧！","link":"/article/2019/hexo-theme-icarus-3/"},{"title":"Hexo | 两个你可能会用到的icarus主题配置","text":"开始折腾hexo也差不多有一个多礼拜了，icarus主题整体来讲还是非常棒的，集成的评论、捐赠插件都很全很完整。 但毕竟众口难调，每个博主都有些定制化的需求，就会有一些没满足的功能。这里整理了我在建站过程中真实遇到的问题，希望对也在用icarus主题的同学们有所帮助。 一、文章置顶博客默认是按照创建时间倒序排列的，有的时候我们希望可以置顶一些文章，icarus没有提供这个功能，因此我们还是需要进行一些改造。 实现的效果是：写文章的时候在front-matter区域\b定义文章的权重（top），如果top的数值大于0，则将该文章置顶，并展示置顶标签。 第一步，添加top属性在根目录的config文件中 /_config.ymlindex_generator: path: '' per_page: 10 order_by: top: -1 date: -1 \b第二步，修改generator.js，主要是在生成html代码时优先按照top排序 /⁨node_modules⁩/hexo-generator-index⁩/lib⁩/generator.jsvar paginationDir = config.pagination_dir || 'page';// added codeposts.data = posts.data.sort(function(a, b) {if(a.top &amp;&amp; b.top) { if(a.top == b.top) return b.date - a.date; else return b.top - a.top;}else if(a.top &amp;&amp; !b.top) { return -1;}else if(!a.top &amp;&amp; b.top) { return 1;}else return b.date - a.date;});// endvar path = config.index_generator.path || ''; 第三步，修改模板中的post.md，添加top属性并设置默认值为0 /scaffolds/post.md---title: {{ title }}date: {{ date }}tags:top: 0--- 最后，根据大家自己的喜好在前端添加标签咯~ /themes/icarus/layout/common/article.ejs&lt;% if (post.top&gt;0) { %&gt;&lt;i class=\"fas fa-arrow-alt-circle-up\" style=\"color:#3273dc\"&gt;&lt;/i&gt;&lt;span class=\"level-item\" style=\"color:#3273dc\"&gt;&amp;nbsp;置顶&lt;/span&gt;&lt;% } %&gt; 最后的效果如图，蓝色的置顶标签就是了： 二、添加阅读统计valine插件在1.2.0版本之后提供了文章阅读量统计的功能，好处是可以通过leancloud后台的可视化界面看到数据。目前只支持文章PV的统计，添加方式非常简单： 在config文件中添加valine的visitor属性 修改valine的加载文件valine.ejs，添加visitor字段的加载 根据想添加统计的展示位置，例如文章尾部，添加前端代码 具体的操作可以参考valine官方文档，这里不多介绍了。我用的是更加简单方便的busuanzi进行统计： 第一步，在icarus主题的head.ejs中添加脚本 /themes/icarus/layout/common/head.ejs&lt;% if (has_config('visit')) { %&gt;&lt;script async=\"\" src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;&lt;/script&gt;&lt;% } %&gt; 第二步，在网页footer里面统计站点的UV和PV /themes/icarus/layout/common/footer.ejs&lt;span id=\"busuanzi_container_site_uv\"&gt; ❤️ 感谢 &lt;span id=\"busuanzi_value_site_uv\"&gt;0&lt;/span&gt; 位小伙伴的&lt;/span&gt;&lt;span id=\"busuanzi_container_site_pv\"&gt; &lt;span id=\"busuanzi_value_site_pv\"&gt;0&lt;/span&gt; 次陪伴&lt;/span&gt; 第三步，在每篇文章article里面统计阅读量PV，主页不显示 /themes/icarus/layout/common/article.ejs&lt;div class=\"level is-size-7 has-text-grey\"&gt; &lt;div class=\"level-left\"&gt; &lt;i class=\"far fa-eye\"&gt;&lt;/i&gt; &lt;span&gt;&amp;nbsp;&lt;/span&gt; &lt;span id=\"busuanzi_container_page_pv\" style=\"display: inline;\"&gt; &lt;span id=\"busuanzi_value_page_pv\"&gt;0&lt;/span&gt; &lt;/span&gt; &lt;/div&gt;&lt;/div&gt; 效果大家在这个页面就可以找到啦~ 不过需要注意的是，busuanzi统计UV的逻辑是根据浏览器请求的cookie，不是严格意义上的设备唯一标识。逻辑严谨什么的并不重要，有人气才是关键对吧！ (๑•ㅂ•́)و✧ 参考：https://www.jianshu.com/p/42a4efcdf8d7","link":"/article/2019/hexo-theme-icarus-2/"},{"title":"大学生最终还是得搞社交啊","text":"大学生最终还是得搞社交啊。 兜兜转转，还是回到社交这个命题了。 获客同学投了很多类型的广告，大学生交友方向的效果最好。也从另一侧面反映了大学生的社交诉求吧。 嗯，就是，谈朋友呗。 社区因为内容共情而互动的底层逻辑，还成立吗？ 成立吧，同好兴趣向的内容还是有一定互动效果的。 但是社区里面这些内容跟大学都没啥关系啊！只是发布者带着个大学生的标签。 就做社交吧，保留一点内容的火种。","link":"/article/2019/talk-2/"},{"title":"Hexo | 服务端大变样，Node.js 接管后台","text":"每每想到斥巨资购买的服务器只是用来部署一个静态博客网站，难免会觉得有些大材小用。考虑到自己经常会捯饬一些小应用，于是决定把服务端改造一下：用 Node.js 来搭建服务端，通过路由的方式来实现博客和应用的并存。 Node.js 环境Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台，具有速度快、性能好的突出优点。不仅适合前端码农使用，对于后端也是个不错的选择。首先在服务器上配置 Node.js 环境： sudo apt-get install nodejssudo apt-get install npm Express 框架Express 是一个简洁而灵活的 Node.js Web应用框架，可以帮助我们快速创建 Web 应用。首先安装 Express 和几个重要的模块： npm install express -gnpm install body-parser -gnpm install cookie-parser --gnpm install multer -g 这里我们要用“骨架生成器” - express-generator 在 /home/ 目录下创建一个 Express 项目： npm install express-generator -gcd /home/express nodeServer --view=pug 进入项目目录安装依赖项 npm install，就可以启动应用了： npm start 在浏览器中输入网址 http://127.0.0.1:3000，看到“Welcome to Express” 字样就说明成功啦！ 在 Express 中配置博客路由假设我们的博客静态文件在 /home/hexoBlog，Express 工程在 /home/nodeServer，那么只需要这样修改 app.js 即可： app.use(express.static(path.join(__dirname, '../hexoBlog/')));app.use('/', indexRouter); 第一行的意思是将 ../hexoBlog/ 路径添加至静态目录，这句话相当于也是解析了 ‘/‘ 这个默认路径。第二行是 express-generator 自动生成的，意思是用 indexRouter 方法来处理默认路径。但是因为 Node.js 中间件函数是按顺序执行的，因此当我们访问 http://127.0.0.1:3000 时，会先从静态目录中读取博客主页，而不会使用 indexRouter 来处理请求。 重新运行一下 nodeServer，这时候访问 http://127.0.0.1:3000 应该就能看到我们的博客主页啦！ 进程保护Node.js 线程十分脆弱，一旦遇到运行错误便会严重到退出进程导致系统或应用瘫痪，这时候我们就需要 forever 帮助我们实现进程的重启： npm install forever -gcd /home/nodeServerforever start .bin/www 这样我们就可以放心去玩耍啦！ 如果想重启或者停止应用也很简单： forever restart .bin/wwwforever stop .bin/www Nginx 反向代理目前为止，我们的博客已经平稳运行在 http://127.0.0.1:3000，如果希望通过域名访问则可以通过 Nginx 进行反向代理： sudo vim /etc/nginx/sites-available/default 关于 Nginx 部分的配置详见上一篇，不同的是我们添加了https的反向代理，首先定义了一个 upstream： upstream nodejs_3000 { server 127.0.0.1:3000; keepalive 64;} 然后在 server 中添加了对默认路径的设置： server { ... location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_pass http://nodejs_3000; }} 重启 Nginx 服务，这样我们就可以通过自己购买的域名访问啦！","link":"/article/2019/hexo-nodejs-nginx/"},{"title":"内容社区精选的逻辑","text":"质量不是唯一衡量的标准。 终于忙完了Best Nine，闲下来想想这个社区给我带来了什么影响。 在即刻混了很久，第一次被精选，居然一条随手发的游戏视频。 内容的质量并不高，但是下面的互动非常多，毕竟R*的买bug送游戏是主机玩家经久不息的梗。 从结果上看，这次编辑精选，让我获得了极大的动力在即刻上生产动态。 在日常的运营工作中，我们经常挑一些美美美、好好好的内容来精选，这个是通用的逻辑没错。但是这样的话，更多的是让消费者来浏览PGC内容，如果从社区互动活跃的考量来说，并不一定是最优的选择。 这让我联想到去年做话题那会儿的数据，往往是一些别人看来很low很接地气的话题，动态量比较多，比如说“我中过最大的奖”、“单曲循环的歌曲”之类的。一方面这些话题创作门槛低，另一方面这些话题大家或多或少都有经历，容易产生共情。 所以精选的逻辑中，质量不是唯一衡量的标准，内容的共情也很重要。","link":"/article/2019/talk-1/"},{"title":"社区的护城河是什么","text":"社区的护城河是认同感。 一直在想一个问题，社区的护城河到底是什么。 首先排除产品本身。社区的底层框架其实很简单：服务于创作者的内容创作、服务于消费者的内容浏览、服务于人际关系的互动。PC时代，找一个开源社区框架，比如Discuz! ，再搞一台服务器，就可以做出一个PC社区。同样的，在移动互联时代，做一个社区功能完善的App并不难。 我一度觉得社区的护城河是内容，是逐渐积累的海量PGC和UGC的内容，知乎的文章专栏、小红书的达人攻略、bilibili的ACG视频。友商无法短期内快速形成这些高质量的内容，也就无法去撬动原社区的用户。 直到悟空问答的出现。悟空问答是头条系的知识社区产品，对标知乎。悟空问答为了解决头部KOL和内容的问题，花重金签约知乎大V甚至各路综艺明星，通过创作者计划产生了不少优质内容。似乎从内容这个角度来看，悟空问答已经交了一份至少及格的答卷。但从数据来看，从17年底到18年底，日活数据几近腰斩。问题在哪？ 从画像上我们可以找到部分原因，悟空问答的客群画像和头条比较接近，下沉用户比例很高，这一点和知乎的画像产生了鲜明的对比。你会发现，充斥在信息流首页的问题，不是“方文山的哪些词惊艳了你”，而是“猪肉怎么做更好吃”，这是客群结构对于运营甚至算法的选择，也是内容创作激励过早介入的结果。 那么问题是在于人吗？如果悟空问答也走高知路线，推行邀请制，只签约部分领域的大V，可行吗？且不说资本经不经得起等待，知乎原住民的迁移成本难以估量。 这个迁移成本就是认同感，认同感越高的社区，迁移成本越高。社区终究是需要沉淀的，从早期少部分人的狂欢，到逐渐敞开胸怀接纳更多志同道合的人，社区积淀了人、积淀了内容，更积淀了认同感：对用户的认同，对内容的认同，对社区的认同。 认同感促进了整个社区的良性运转，创作者因为认同持续创作，高质量的内容吸引消费者，消费者因为认同向创作者跃迁。这是社区的壁垒。 有的观点认为社区的壁垒在于UGC内容，我觉得这洽洽佐证了我的观点。因为认同感是因，只有用户对社区有足够的认同感，才会自发得去生产内容，获得其他人对自己的认同，周而复始，循环往复。","link":"/article/2019/shequ-1/"},{"title":"python助力小程序“订阅消息”群推送","text":"近期小程序要把“模板消息”下线，取而代之的是“订阅消息”。而“订阅消息”也做出了一些改变，推出了“一次性订阅”消息，小程序可以引导用户订阅一次消息： 为什么叫“一次性订阅”呢，如果用户此处“允许”，那么他无论多久之后，都可以收到一次消息；也就是说，如果用户多次允许，将可以收到多次消息。这是一个额度累计的过程，用户允许得越多，能收到的额度也就越大。 1.弹窗时机的选择这是一个非常好的用户唤回方式，当然了，用户也可以通过设置永久拒绝你给他发送消息。所以在我的小程序“头像挂件君”中，提示用户允许发送消息的时机，出现在一个他完成完整流程的地方，也就是用户成功导出作品后，我会提醒他要不要接受。 之所以这样设计，是因为我想把“一次性”变成“永久”，在用户最满意、最高兴的时候，弱弱地问他一句“小哥哥小姐姐，要不要订阅一下？”此时的成功率将非常高。 粗看了一下数据，在近3天的活跃用户中，有10%的用户成功订阅消息，个人觉得这还是一个比较高的比例了。 2.发送订阅消息用户允许发送消息后，微信提供了发送订阅消息的方法：subscribeMessage.send，支持HTTPS调用，也支持云调用。这里我们选择了HTTPS调用，时机是出现一款新的贴纸后，告诉所有的订阅用户。 POST https://api.weixin.qq.com/cgi-bin/message/subscribe/send?access_token=ACCESS_TOKEN 发送订阅消息由于微信的限制，需要逐条请求，也就是每个用户请求一次，而不能一次性推送完。由于开发能力有限，我没有时间去做一套完整精密的推送系统，所以这里就借助python来实现自动化。 2.1 将所有订阅用户的openid导出因为我使用的是微信自带的数据库，所以可以直接在后台进行导出，选择导出为csv文件，名为id.csv，格式如下： _id subscribeTime a 1580961993978 b 1580961993979 c 1580961993980 2.2 配置config.json文件这个文件是每次都要修改的，因为包含了你推送的内容以及APPID和APPSECRET： { \"APPID\": \"你的APPID\", \"APPSECRET\": \"你的APPSECRET\", \"template_id\": \"你的模板ID\", \"touser\": \"\", \"page\": \"你希望的打开路径，例如：pages/index/index\", \"data\": { \"thing1\": { \"value\": \"🎩帽子系列\" }, \"time2\": { \"value\": \"2020-02-06\" }, \"thing3\": { \"value\": \"生日帽、安全帽~\" } }} 2.3 推送逻辑文件push.py这里是完整的推送逻辑，首先读取config.json文件中的APPID和APPSECRET，以获得access_token；然后根据导出的id.csv文件逐一推送： #!/usr/bin/env python# -*- coding: utf-8 -*-import sysreload(sys)sys.setdefaultencoding('utf8')import ioimport requestsimport jsonimport xlwtimport timeimport csv# 读取id文件uidFile = io.open(\"./id.csv\", \"r\", encoding='utf-8')uids = csv.reader(uidFile)# 读取配置文件configFile = io.open(\"./config.json\", \"r\", encoding='utf-8')config = json.load(configFile)# 获取access_tokenAPPID = config['APPID']APPSECRET = config['APPSECRET']del config['APPID']del config['APPSECRET']getAccessTokenUrl = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=%s&amp;secret=%s\" % (APPID,APPSECRET)response = requests.get(url=getAccessTokenUrl).json()access_token = response['access_token']# 推送地址pushUrl = \"https://api.weixin.qq.com/cgi-bin/message/subscribe/send?access_token=\" + access_token# 日志excellogExcel = xlwt.Workbook(encoding='utf-8', style_compression=0)sheet = logExcel.add_sheet('log', cell_overwrite_ok=True)sheet.write(0,0,\"_id\")sheet.write(0,1,\"response\")index = 0for x in uids: if index == 0: index = index + 1 continue uid = x[0] # 执行推送 print(\"=====================\") config['touser'] = uid data = json.dumps(config) response = requests.post(url=pushUrl,data=data) print(\"推送至:\"+uid) print(response.text) # 写入excel sheet.write(index,0,uid) sheet.write(index,1,response.text) index = index + 1logFileName = r\"./pushLog_%s.xls\" % time.strftime(\"%Y%m%d%H%M%S\", time.localtime()) logExcel.save(logFileName) # 在字符串前加r，声明为raw字符串，这样就不会处理其中的转义了。否则，可能会报错 将上述三个文件id.csv、config.json以及push.py放在同一个文件夹就大功告成啦，然后在该目录执行以下代码： python push.py 就可以完成批量推送啦！此外，每次执行还会输出一个log文件，文件名为pushLog_xxxxx.xls，记录了每个人的推送结果。 使用python完成小程序“订阅消息”的群推送就介绍到这啦，最后给自己的小程序打个广告，大家可以去体验一下订阅流程喔~","link":"/article/2020/miniprogram-2/"},{"title":"“大学生社区”项目复盘总结","text":"这一篇复盘一下“大学生社区”这个项目。 项目背景2017年发生了这么几件事儿，一个是大学生裸贷新闻不断，经过一系列整顿后，非正规军被清除出象牙塔；另一个就是数据显示，花呗成为了大学生提前消费的主要信贷产品，对于信用卡而言是一个潜在威胁。2017年底信用卡中心大学生流量经营项目组成立，项目组背负着探索大学生经营方式，储备潜在客户的历史使命。 前期团队经过大量的头脑风暴、用户调研访谈，使用微信群和小程序进行了一段时间的MVP验证，在2018年的秋季开学季前，定下了“大学生社区”这么一个方向。也许看官您对前后两段话的逻辑关系有点茫然，定方向这件事情，找个时间专门写一写。 项目历程yaktalk就是在这样的背景下诞生的，产品第一版的slogan是“分享我的大学生活”，我们希望建立一个大学生专属的社区，大家在社区中分享自己的生活百态，聊聊自己学校的八卦，和有趣的人成为朋友。整个产品的历程，基本上是沿着社区向社交发展的。 近40人的团队有来自各部门的同事，也有从虎扑、京东挖来的专家，大多数同学其实都没有社区社交产品的经验，大家在两年的时间里共同成长，共同进步。因为一些客观原因，项目在今年年初关闭了，这也算是我真正意义上参与过的从0到1的项目，更因为项目在金融体系下运作，这也给了这个项目一份独特的意义。 回顾这两年的经历，做了很多牛逼的事儿，也做了一些现在回头看也许是错误的决策，为了给以后的工作长长记性，从一个全程经历每件事情的核心成员的角度，进行复盘与总结。 这里先把产品几个关键的版本说明贴一下： 2018年8月30日 - 1.0.0版本信息流动态发布评论互动个人主页通知 2018年11月21日 - 1.1.0版本搜索推荐好友 2018年11月28日 - 1.2.0版本圈子 2019年1月25日 - 1.3.2版本校园身份认证图片水印 2019年3月2日 - 1.4.0版本首页改版 2019年3月12日 - 1.5.0版本私信 2019年4月27日 - 1.5.7版本任务中心 2019年5月26日 - 1.6.0版本附近动态 2019年5月31日 - 1.6.1版本发现身边 2019年7月29日 - 1.7.2版本讨论 2019年8月31日 - 2.0.0版本全新学校主页全新个人主页 2019年11月3日 - 2.1.2版本每周CP 从功能的发展路线来看，我们可以看到两条线，一条是前期围绕着社区的，针对内容生产者和消费者的功能完善；另一条是中期围绕着社交的，在私信功能推出之后，设计了很多社交导向的功能，来促进用户之间的互动行为。 我们一直定义这款产品是一个社区产品，社区内容、用户互动的数据一直是我们的指标项。大学生分享自己的生活，和同校、同乡、同好的人产生共情/共鸣，进而互动、产生社交关联。但我觉得发展到1.5.0具有私信版本这个功能之后，这款产品已经不再是一款社区产品了。对于一款社区产品来说，社区的认同感应该会激励更多公开内容的生产，而私信功能上线后，我们发现用户对于私聊的诉求一下子得到了释放，这也从一个侧面体现了很多用户使用产品的需求就是交友。而后相关辅助社交功能带来的数据甜头，已经彻底把这款产品转变成大学生社交产品了。 回过头复盘下来，我觉得有这么几个问题： 问题一、yaktalk并没有解决用户的刚需即使是一个以闲逛为主的社区产品，也是解决了用户的某方面需求的。 老生常谈，所谓刚需，对应的就是用户打开App的原始动力。百度解决了用户搜索的刚需，滴滴解决了用户出行的刚需，抖音解决了用户打发碎片化时间的刚需，知乎解决了用户对于了解知识的刚需……刚需是内因，在产品的行为是表现。 反观yaktalk，我们的愿景是把全国所有的大学生都聚集在这里，分享自己的校园生活，结交各种各样的朋友。 所以这样一个大学生社区解决了用户什么刚需？分享自己的校园生活是需求吗，不是，我可以在QQ空间分享、我可以在微信朋友圈分享、我可以在学校内部的论坛分享，为什么要来到这样应该社区分享？结交朋友是需求吗，也不是，社交是一个行为，我可以通过线上线下各种方式结交朋友，为什么一定要来到这里认识人？ 行为背后的情绪才是需求，有的人是想网恋，有的人是想找到同好，有的人是想了解大学攻略，有的人是想找到直系学长要考经，有的人是因为失恋了找一个用户比较少的地方当做树洞。 大学生是属性标签，社区是形态，如果在一开始就定位准了一个核心诉求，我想产品的发展路径会明确很多。 问题二、社区的初期应该是少数人的狂欢一个社区初期是什么样的？翻一翻成功者的经历，知乎“从最开始的注册用户来看，创业者、工程师和互联网从业者是知乎早期的主要用户。因为创业者的问题最多，从产品研发、招聘、法律、行业趋势等等。创业者需要的知识跨度特别强，既真实又活跃。” 小红书初期以境外购物为切入，“用户开始分享和交流其用真金白银‘砸’出来的境外购物心得，包括每个商品的详细信息，如品牌、包装、价格、购买地点和使用心得等。”换句话说，社区的初期应该是少数人的狂欢。圈定了特定的领域、人群，社区是自带话题的存在，运营人员只需要丢下去一颗种子，自然就会发芽。从内容上看，内容的方向相对统一，可以沉淀某一领域的优质内容；从传播上看，这样的社区就像是定点爆破，可以“引爆”一群人，形成口碑；从运营上看，可以较少地介入，简单带带话题讨论，就很可以形成社区的讨论氛围。这也意味着从数据上看，早期的社区具有很可观的互动和留存数据。 yaktalk的1.0.0版本slogan是“分享我的大学生活”，内容定调在了大学生的生活百态，可以是大学城周边的美食探店、可以是每日穿搭、可以是军训轶事，总而言之，并没有对内容的方向做特别严格的限定。社区的启动方式，内容创作者方面，我们通过微博、小红书、知乎等社区平台招募了很多各个方向的校园红人，涉及的领域有摄影、手帐、美食、写字等等等等；内容消费者方面，我们通过开学季的校园路演、校园大使推广、社团入驻等偏线下的方式，获取了近1万名普通用户。 从数据上看，我们似乎也满足社区的2/8定律，20%的头部用户产生了80%的动态；产品的次日留存也还行，大概有30%左右；也有一定的互动表现，点赞、评论之类。这种数据给我一种波澜不惊、老夫老妻的感觉，感觉已经有很多用户，已经运营了很长时间，各方面都很稳定的感觉，却唯独并没有一种“狂欢”的感觉：大家踊跃发布内容、彼此聊得火热、自己玩得很high甚至根本不需要运营过度介入。 回头看，大学生社区如果定义成一个内容社区的话，初期应该是某一维度、领域、内容的细分。哪怕是一个综合社区，早期也不可能全领域全方向全面开花。大学生社区的细分可以是“大学生出国备考交流”、“大学生兼职信息”、“大学生求职经验分享”，先让社区在小部分人中运转起来，积累内容、形成气氛，再逐渐扩大范围。 问题三、核心功能来得晚了一些我们直到1.5.0版本（距离第一个版本近9个月）才推出了私信这个功能。 其实在很早的时候，大概第一年10月的时候，我们从内容审核后台看到一些用户在注册后，就在很多动态下面留微信或者要微信，起初我们定义这种行为是一种骚扰，因为在没有互动基础的情况下的交友，就很不单纯，所以我们审核同学会屏蔽这些内容。 后来我们发现，也有一些同学，真的聊得来，在一条动态的评论区里面互动了很多条之后，会互换微信，然后约定加完好友后把这条评论删掉。发现了这样的现象后，我们才突然认识到私信的重要性，于是在盘算着推出这个功能。这件事情在产品团队内部也有争议，反对者主要持两个观点：一个是说，社区产品中，不一定需要私信功能，如果是一个强调基于内容互动的社区，用户的互动行为中私信不是重点；另一个原因就是说，私信对于当前的社区而言，只是将评论区互换微信的行为改在私聊中进行，并没有给社区带来什么收益。 首先，对于社交产品而言，私信的意义毋庸置疑。对于社区而言，如果是以干货内容为主的社区，比方说CSDN技术论坛、人人都是产品经理这样的社区，用户之间的关系偏弱，私信的存在不一定那么重要。另一方面，这些社区的内容创作者，以经验分享为主、观点讨论为辅，使用频率相对较低，私信没有得到及时得处理反而会影响对方的使用体验。 但对于大学生社区而言，私信就是一项必备的核心功能了。在这里，内容消费并不是根本诉求，用户连接才是更重要的使命——因为同好、同乡、同学等标签而产生潜在的社交关系。私信，是用户关系表达的重要方式之一。 私信功能上线后，数据还是挺好看的。我们发现了大量用户行为路径导向私信，比方说动态-&gt;头像-&gt;个人主页-&gt;私信，再比方说推荐好友-&gt;头像-&gt;个人主页-&gt;私信，有些新用户可能从没发过一条动态，但却产生了私聊的互动行为。从另一个侧面来说，私信反映了大学生群体对于交友的强烈诉求，这也促进了产品的重要转型。 如果早一点推出私信功能，也许我们在内容这件事情的纠结会少一些，也许我们向社交方向转变的进程会更快一些。 问题四、拍脑袋的后果是拍大腿当我们不知道迭代什么的时候，我们在社区里面寻找用户的痛点。我们发现，有少数用户把yaktalk当成了树洞，正是因为里面的同学她并不认识，她在社区里面讲一些自己的悄悄话。 受此启发，我们规划了一个“树洞”功能，一个只在晚上10点开启的匿名空间，用户在里面可以发动态而不暴露身份，在第二天空间将自动销毁。 我们希望用户可以在树洞里讲一些羞羞的、负面的、情绪化的内容，并因此而互动。功能上线后，我们每天运营一个树洞话题，在“树洞”空间中进行引导。 这种一厢情愿的功能，数据表现并不好，树洞并没有发酵成我们希望的样子。这里面有产品设计的原因，当时给这个功能的入口比较深，主要是通过推送的方式进行触达。但我觉得更主要的问题是，这个功能并没有经过完整的用户调研与分析，是为少数人量身定做的拍脑袋功能。 回过头来看，其实应该做一次MVP，拉一部分用户在QQ匿名群里面玩起来，看看大家在树洞里面都聊些什么，有什么转化成产品功能的点。而不是简单论证后就开始设计功能，平心而论这个功能对当时的技术框架还影响蛮大的。 问题五、数据焦虑下的头脑风暴应当审慎而收敛当发现数据出现了预期之外的下滑或者波动时，我们团队内部很喜欢做的一件事是头脑风暴。头脑风暴的内容大致氛围两部分，一部分是归因，一部分是求解。 在归因这一Part没什么毛病，大家谁还不是个喷子，能把问题看得很通透，有的点也说得很准。但是在求解这个环节，我们经常发散得过于严重，明明是讨论“如何进一步提高话题的互动”，却会引申到“做话题这件事情有意义吗”这种又大又空又怀疑人生的问题上，进而提出一个新的功能，来弥补之前的设计缺陷。 这种针对具体问题的头脑风暴，应当审慎而收敛，主持人必须时刻保持清醒，一旦苗头不对就立即纠偏。 问题六、文档撰写不规范这个问题其实是在写复盘的时候发现的。以产品PRD文档为例，其实在产品推进的过程中，每个功能的设计背后都有当下的判断和逻辑，要么是基于数据分析、要么是基于需求调研、要么就是拍脑袋。 在PRD的撰写上，我们基本上有原型图、UML、数据埋点需求等偏执行的内容，但开篇却没有把背景和出发点。这就导致了在复盘功能的时候，无法准确追溯到当时的全貌，有个功能不明白当时为啥要做，有的功能在回顾的时候觉得当时逻辑并不通顺。 郑重提醒自己，以后的每一份PRD文档上都记录当时的背景和逻辑，不管逻辑正确与否，方便在回顾时理解当时功能设计的主客观原因。 我的感想yaktalk是我第一个完整参与过的从0到1的项目，这个项目公司给我们很大的空间，让我们可以尝试很多可能性，这在以前我是完全不敢想的。 团队的小伙伴都非常专业，在整个项目过程中学到了很多，也成长了很多。都说创业是痛苦的，这种内部创业尤其痛苦，每一步都没有前人走过，我们基本上都是摸着石头过河。 虽然因为种种原因，最后项目关闭了，但我不后悔。 感谢公司能给我们这次机会尝试，提供丰厚的资源。 感谢每一位团队小伙伴，无论是合作过的，没合作过的。 感谢社区里的每一位用户，谢谢你们曾来过。 路还很长，加油。","link":"/article/2020/yaktalk-1/"},{"title":"内部创业方向选择的问题思考","text":"大学生客群经营项目，算是我们的一次内部创业。领导层给了很开放的命题，我们在项目成立后，摸索了大半年时间，最终选定了“大学生社区”的方向。 先说结论，我觉得方向本身没有问题，但是在选择、确定方向的推演路程上，存在一些问题，我觉得主要有这么几个： 可以出圈，但不要放弃优势这是一个必须直面的问题，就是在金融体系下，做一款大学生的产品，如果跳脱出金融的框架，是不是一个正确的选择？首先我不得不承认，当时大家能有魄力，选择大学生社区这个方向，还是很有勇气的。直到今天，公司里有些对我们不太熟悉的同事，还以为我们做的是学生信用卡相关的业务。 做自己本行无关的事情，放弃擅长的事情与资源，从短期来看是一个错误的决定。大量的摸索和试错，给不到一个令投资人满意的结果，也许很快就会失去耐心。我们内部推演过很多其他的可能，有校园电商分期、有学生羊毛社区等等，都是基于现有经验或者本行资源的一些方向，每一个都比“分享我的大学生活”来的更加明朗，更加清楚如何运作、如何落地。但是从项目的出发点来看，这个决定不一定是错误的。 项目的背景来自上层对大学生客群的探索，从那年的大环境来看，一方面是威胁，花呗对大学生提前消费的培养，正在抢夺信用卡的使用心智，一旦大学生毕业步入社会，如何让他对信用卡仍然保持需求；另一方面是机遇，互联网金融产品，因为合规等多方面的原因，被大量清退校园市场，作为银行，正规军的身份似乎可以有所作为。项目的出发点时，提前接触到大学生并经营他们，作为客群结构的战略储备。 命题如此开放，思考的角度最好就不要过于局限，基于现有业务的客群延伸，是一个选择，但可能不是唯一的选择。这是一个赌博，没有人知道结局会如何。选择一个包容性强，有很大空间的方向，至少在现在看来，我不认为是一个错误的决定。 尊重数据，尊重结论我们的产品方法论非常齐全，我们知道要先做用户调研，再进行小范围的MVP快速验证，再根据数据纠正方向，找到突破口后进行快速增长。 但我们犯了一个错误是，事情我们都做了，但我们没有尊重数据，没有尊重结论。 我们起初通过调研，把方向定在了大学生互帮互助的知识社区，每个年级的用户都有相应的知识诉求，比如说大一的同学需要大学攻略、选课建议，大二的同学需要专业指导，大三的同学需要兼职、实习、考研、出国的经验，大四的同学需要求职的面经。 我们选了大学生求职为切入点，时值3月春招，我们通过求职大礼包裂变、渗透转化的方式，拉了一个200人左右的微信群，并在微信群里面进行岗位信息整理发布、学长求职经验传承，引导用户进行求职方面的问答。 数据看下来，大家关心的是岗位信息本身，对经验问答的需求并不那么强烈。所以我们开始丰富问答的领域，在小程序上线时，运营的话题已经从“产品经理面试要准备哪些内容”变成了“宿舍里有北方的同学是什么样的体验”。 这样的话题取得一定的效果，从也更加坚定了我们往一个比较宽泛的社区方向发展的决心。 上面这段话逻辑通顺吗？对于求职经验传承问答社区这个方向，真的是不能做吗，数据表面大家对资讯的需求更加旺盛，为什么不能做呢？尊重数据，是我们优化过，如果数据表现始终不如意，我们才选择改变；尊重结论，是在原有结论的基础上优化迭代，而不是另辟蹊径。 一口吃不成大胖子我们犯了一个每个人都会犯的错误，就是贪。我们有4000万的愿意，我们有对未来社区的美好设想，在PPT上画好了饼，却在执行中吃得更饱。 从社区内容的角度来说，大学生并不是一个很好的切分维度。大学生特有的内容，不是美食探店、手帐、摄影之类的，而是大学攻略、选课方法、军训摸鱼宝典、出国备考指南、实习兼职信息等等，而这些内容又具有很强的地域性、时效性，运营起来难度非常大。沿着这个思路，可以以“大学生出国备考社区”为切入，内容以考经、套磁信为主，进一步的发展要么是扩大备考的范围，要么是继续深入出国这个方向，引入培训机构、讲师等专业辅导。 天马行空易，脚踏实地难。","link":"/article/2020/yaktalk-2/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"腾讯云","slug":"腾讯云","link":"/tags/腾讯云/"},{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"},{"name":"Pages","slug":"Pages","link":"/tags/Pages/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"小程序","slug":"小程序","link":"/tags/小程序/"},{"name":"Bulma","slug":"Bulma","link":"/tags/Bulma/"},{"name":"大学生","slug":"大学生","link":"/tags/大学生/"},{"name":"社区","slug":"社区","link":"/tags/社区/"},{"name":"社交","slug":"社交","link":"/tags/社交/"},{"name":"一个想法不一定对","slug":"一个想法不一定对","link":"/tags/一个想法不一定对/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"精选","slug":"精选","link":"/tags/精选/"},{"name":"用户激励","slug":"用户激励","link":"/tags/用户激励/"},{"name":"互动","slug":"互动","link":"/tags/互动/"},{"name":"壁垒","slug":"壁垒","link":"/tags/壁垒/"},{"name":"项目复盘","slug":"项目复盘","link":"/tags/项目复盘/"}],"categories":[{"name":"Coder","slug":"Coder","link":"/categories/Coder/"},{"name":"Hexo","slug":"Coder/Hexo","link":"/categories/Coder/Hexo/"},{"name":"PM","slug":"PM","link":"/categories/PM/"}]}