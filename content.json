{"pages":[{"title":"留言板","text":"快来nss吧！","link":"/board/index.html"},{"title":"游乐园","text":"🎡 园区免费对外开放，全年每天无休🎠 正在筹划更多项目，敬请大家期待🛠 欢迎各位游客留言，提出宝贵意见 Jike Best Nine🛠 竣工于 2018.12🌟 一键生成你的2018年即刻高光九图","link":"/playground/index.html"}],"posts":[{"title":"Hexo | 如何将博客部署在云服务器","text":"之前简单介绍了将 Hexo 博客部署在代码托管平台的方法，这一篇介绍一下如何把博客建在自己购买的服务器上。 准备工作 域名，可以在任何一个地方购买 腾讯云服务器，1G1C1M的最基础配置即可 部署步骤登陆云服务器Linux/Mac OS X 系统的电脑可通过密码登陆云服务器： 打开 SSH 客户端（Mac可使用系统自带的终端） 输入 ssh -q -l @User_Name -p 22 @Your_IP_Address 输入 CVM 实例密码进行登录（CVM 实例密码可以在服务器关机时进行修改） 服务器环境准备以 Ubuntu 16.04 LTS 系统为例，这一步主要是在服务器上搭建 Git 和 Nginx 环境，Git 用来部署静态网站内容，Nginx 用来做代理。 Git首先，使用 apt 包管理工具更新本地包。更新完成后，下载并安装Git： 12sudo apt updatesudo apt install git 完毕后查看版本信息来验证是否正确安装 Git，如果出现版本信息那就安装正确了： 1git --version Nginx类似的，我们通过以下\b面的命令安装 Nginx： 12sudo apt updatesudo apt install nginx 博客\b自动发布下面我们要配置博客的 Git 环境，让我们在本地执行 hexo d 的时候直接将静态网站资源上传到云服务器上： 静态网站文件目录新建一个文件夹用于存放我们本地编译生产的静态文件，并修改权限： 123mkdir /home/hexoBlog/chown -R $USER:$USER /home/hexoBlog/chmod -R 755 /home/hexoBlog/ 服务器设置首先我们创建一个名为 hexoBlog 的裸仓库（bare repo），然后修改目录的所有权和用户权限：\b 123mkdir /home/git/chown -R $USER:$USER /home/git/chmod -R 755 /home/git/ 随后执行如下命令创建一个裸仓库： 12cd /home/git/git init --bare hexoBlog.git 然后，创建一个新的 git 钩子文件 post-receive，用于自动部署： 1vim /home/git/hexoBlog.git/hooks/post-receive 按 i 键编辑，添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件）： 12#!/bin/bashgit --work-tree=/home/hexoBlog --git-dir=/home/git/hexoBlog.git checkout -f 然后，按 Esc 键退出编辑模式，输入:wq 保存退出。 修改文件权限，使得其可执行： 1chmod +x /home/git/hexoBlog.git/hooks/post-receive 本地 Hexo 设置在 Hexo 的根目录 _config.yml 文件中添加部署： 12345deploy: type: git repository: cvm: 服务器用户名@服务器IP地址:/home/git/hexoBlog branch: master 这样博客自动发布的环境就配置好了。 服务器 Nginx 配置启动 Nginx 服务首先启动 Nginx 服务： 1service nginx start 启动服务后，我们测试一下是否正常： 1wget http://127.0.0.1 在浏览器中打开购买的服务器数字ip地址，如果有 Nginx 相关字样，就说明服务正常啦！ 配置 Nginx 根目录换句话说，就是如何通过 Nginx 找到我们上传到云服务器的静态文件，修改默认配置文件： 1sudo vim /etc/nginx/sites-available/default 找到如下代码并修改 root 和 server_name： 12345678910server { listen 80 default_server; listen [::]:80 default_server; root /home/hexoBlog; server_name 你购买的域名; ......} 绑定域名将域名A解析至你购买的服务器ip地址： 现在就算大功告成啦，在本地执行一次 hexo d 后，试试在浏览器中打开你购买的域名，有没有显示你的博客首页！ 强制重定向至https使用代码托管平台的 Pages 服务时，我们可以经常发现一个选项，就是强制使用https访问： 如果我们想在自己的服务器上也这么配置，要怎么做呢？ 购买ssl证书我们可以通过很多地方购买免费ssl证书，购买后我们根据指示进行域名所有权的验证（推荐使用 DNS 验证，只需要配置一个\b TXT 解析即可），验证完成后即可下载 Nginx 版本的证书。证书包含两个文件： .pem文件：证书文件 .key文件：证书的私钥文件 上传ssl证书在本地的终端，将\bssl证书上传到服务器： 12sudo scp a.pem 用户名@服务器地址:/home/ssl/a.pemsudo scp a.key 用户名@服务器地址:/home/ssl/a.key 修改 Nginx 默认设置修改之前提到的 Nginx 默认设置文件： 1sudo vim /etc/nginx/sites-available/default 根据自己的实际情况\b监听443端口，添加ssl证书相关内容；并将80端口的http访问重定向到https访问： 12345678910111213141516171819202122232425262728server { listen 443; root /home/hexoBlog; index index.html index.htm index.nginx-debian.html; server_name 购买的域名; ssl on; ssl_certificate /home/ssl/a.pem; ssl_certificate_key /home/ssl/a.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / { try_files $uri $uri/ =404; }}server { listen 80; server_name susreal.com; rewrite ^(.*)$ https://${server_name}$1 permanent;} 以上，就完成了强制通过HTTPS访问的设置。 参考文章 《如何在Ubuntu系统上安装Git》 《如何在CVM上安装Nginx》 《Hexo 教程：Hexo 博客部署到腾讯云教程》 《Nginx/Tengine服务器安装SSL证书》","link":"/article/2019/hexo-cvm/"},{"title":"猪事大吉","text":"现在是北京时间2019年1月23日的凌晨2:40分，我发现自从上班了以后，能让我有毅力熬到深夜的事情，仿佛只剩了写代码这种折腾电脑和自己身心的事情。 前几天刚有三款新型社交App面市，有聊天赚钱的、有发泄负能量的，还有所谓短视频社交的。万万没想到，在这个社交形态多元化、表达自我方式多元化的9012年，我居然建了个博客，这是一件多么复古的事情，但我只想找个地方，工作之余撸撸代码、放放旅行照片。 头一篇不宜过长，免得仪式感太重\b，给自己太大心理压力又坚持不下去，这是多年来的开通无数博客的惨痛经验。就这样吧，祝看到这篇文章的你，猪年大吉吧！","link":"/article/2019/hello-world/"},{"title":"Hexo | 服务端大变样，Node.js 接管后台","text":"每每想到斥巨资购买的服务器只是用来部署一个静态博客网站，难免会觉得有些大材小用。考虑到自己经常会捯饬一些小应用，于是决定把服务端改造一下：用 Node.js 来搭建服务端，通过路由的方式来实现博客和应用的并存。 Node.js 环境Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台，具有速度快、性能好的突出优点。不仅适合前端码农使用，对于后端也是个不错的选择。首先在服务器上配置 Node.js 环境： 12sudo apt-get install nodejssudo apt-get install npm Express 框架Express 是一个简洁而灵活的 Node.js Web应用框架，可以帮助我们快速创建 Web 应用。首先安装 Express 和几个重要的模块： 1234npm install express -gnpm install body-parser -gnpm install cookie-parser --gnpm install multer -g 这里我们要用“骨架生成器” - express-generator 在 /home/ 目录下创建一个 Express 项目： 123npm install express-generator -gcd /home/express nodeServer --view=pug 进入项目目录安装依赖项 npm install，就可以启动应用了： 1npm start 在浏览器中输入网址 http://127.0.0.1:3000，看到“Welcome to Express” 字样就说明成功啦！ 在 Express 中配置博客路由假设我们的博客静态文件在 /home/hexoBlog，Express 工程在 /home/nodeServer，那么只需要这样修改 app.js 即可： 12app.use(express.static(path.join(__dirname, '../hexoBlog/')));app.use('/', indexRouter); 第一行的意思是将 ../hexoBlog/ 路径添加至静态目录，这句话相当于也是解析了 ‘/‘ 这个默认路径。第二行是 express-generator 自动生成的，意思是用 indexRouter 方法来处理默认路径。但是因为 Node.js 中间件函数是按顺序执行的，因此当我们访问 http://127.0.0.1:3000 时，会先从静态目录中读取博客主页，而不会使用 indexRouter 来处理请求。 重新运行一下 nodeServer，这时候访问 http://127.0.0.1:3000 应该就能看到我们的博客主页啦！ 进程保护Node.js 线程十分脆弱，一旦遇到运行错误便会严重到退出进程导致系统或应用瘫痪，这时候我们就需要 forever 帮助我们实现进程的重启： 123npm install forever -gcd /home/nodeServerforever start .bin/www 这样我们就可以放心去玩耍啦！ 如果想重启或者停止应用也很简单： 12forever restart .bin/wwwforever stop .bin/www Nginx 反向代理目前为止，我们的博客已经平稳运行在 http://127.0.0.1:3000，如果希望通过域名访问则可以通过 Nginx 进行反向代理： 1sudo vim /etc/nginx/sites-available/default 关于 Nginx 部分的配置详见上一篇，不同的是我们添加了https的反向代理，首先定义了一个 upstream： 1234upstream nodejs_3000 { server 127.0.0.1:3000; keepalive 64;} 然后在 server 中添加了对默认路径的设置： 12345678910server { ... location / { proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_pass http://nodejs_3000; }} 重启 Nginx 服务，这样我们就可以通过自己购买的域名访问啦！","link":"/article/2019/hexo-nodejs-nginx/"},{"title":"Hexo | icarus主题初体验","text":"Hexo-theme-icarus 是一个优秀的 Hexo 主题，开发者 Ruipeng Zhang 同时还维护了 hexo-theme-hueman 和 hexo-theme-minos 两个项目。 icarus 是一个三栏结构的自适应主题，预置了大量第三方插件，可以方便使用者快速建站。整体风格简约，适合各种类型的站点，无论是技术文章，还是摄影佳作，都可以完美承载。 效果图 安装在命令行中cd至博客根目录，加载主题： 1git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 基础配置首先，要在博客根目录下的 _config.yml 文件中做两件事情： 设置语言: language: zh-CN 设置主题为 icarus: theme: icarus icarus 为我们预置了多达 12 种语言，默认是英文。一开始我没有设置语言，电脑上打开使用的是英文，但是手机上看就是一种类似葡萄牙语的文字。没有深究原因，所以还是按照博客的受众以及平时的喜好设置一下语言，zh-CN是简体中文。 icarus 的文件结构先来看看 icarus 主题的文件结构吧，让我们准备好尖叫声！ 123456789101112131415├─includes├─languages├─layout│ ├─comment│ ├─common│ ├─donate│ ├─plugin│ ├─search│ ├─share│ └─widget├─sripts└─source ├─css ├─images └─js 仔细观察渲染文件 layout 目录，就可以发现 icarus 的强大了，评论、捐赠、搜索、分享以及诸多第三方插件，都已经集成好啦！再说一遍，集成好啦！icarus 的简中翻译相对中规中矩，大家可以根据自己的文案风格修改 languages 目录下的 zh-CN.yml 文件。 _config.yml 文件配置首次在博客根目录执行 hexo clean 或者 hexo g 都会触发 icarus 自动生成一个 _config.yml 文件，我们逐一说明。 logologo 会展示在顶部导航栏的最左侧以及底部的footer区域，大家可以替换 source/images/ 下的 logo 文件，使用 svg 或者 png 格式的都可以。研究源码发现，这个地方给没有 logo 的同学保留了一套文字方案： /layout/common/navbar.ejs12345&lt;% if (has_config('logo.text') &amp;&amp; get_config('logo.text')) { %&gt; &lt;%= get_config('logo.text') %&gt;&lt;% } else { %&gt; &lt;img src=\"&lt;%- url_for(get_config('logo')) %&gt;\" alt=\"&lt;%= get_config('title') %&gt;\" height=\"28\"&gt;&lt;% } %&gt; 也就是说，只要给 logo 添加 text 属性，就会优先展示预设文字作为 logo： 12logo: text: your name 这对于不会画 logo 的同学来说无疑是个大好消息了： 评论系统icarus 预置了 Changyan Disqus Facebook Gitment Gitalk Isso LiveRe 和 Valine 八大主流评论插件。 这里以我使用的 Valine 为例。首先在 LeanCloud 注册一个免费的开发账号，新建一个新应用，并把 appid 和 appkey 配置在对应部分： 1234567comment: type: valine app_id: # (required) LeanCloud application id app_key: # (required) LeanCloud application key notify: # (optional) receive email notification verify: # (optional) show verification code placeholder: # (optional) comment box placeholder text 其余的三项选填，这样就完成了 Valine 的基本配置了。此外，Valine 同步 Gravatar 头像，只要在评论的时候留下邮箱，就会展示你独一无二的头像咯！ 效果如下： 如果有的文章不希望别人评论，但是我们又希望把整个站点的评论关闭的话，就需要对指定文章进行评论关闭操作了。操作也很简单，只需要在文章 markdown 文件的 front-matter 区域设置 comments 为 false 即可： 1234---title: article titlecomments: false--- 打赏作为程序员的收入来源之一，打赏是必不可少的啦。icarus 提供了 支付宝 微信 PayPal 和 Patreon 四种方式： 1234567891011121314151617donate: - type: alipay qrcode: /images/alipay.JPG - type: wechat qrcode: /images/wechat.JPG - # type: paypal # Paypal business ID or email address # business: '' # Currency code # currency_code: USD - # type: patreon # URL to the Patreon page # url: '' 支付宝 和 微信 只需要提供二维码就可以了，可以使用本地静态资源或者图床链接。效果如下，大家懂的： widget我觉得这是 icarus 比较精髓的部分了，所有的 widget 都是一个卡片，\b可以自由摆放在任何位置： 包括文章在内，个人资料、链接、分类、最新文章、归档、标签和标签云都是一个卡片，可以在 _config.yml 中设置各个卡片的具体属性，同时也可以设置卡片出现在网站的左侧还是右侧： 123456widgets: - # Widget name type: tagcloud # Where should the widget be placed, left or right position: left 其他设置（置顶/阅读量统计）还有一些其他的设置就不在这里赘述了，具体可以参考 官方文档 进行了解。 除此之外，我根据实际需求，在 icarus 主题内添加了 置顶文章 和 阅读量统计 的两个小功能，大家如果有兴趣，欢迎随时和我交流喔:-O","link":"/article/2019/hexo-theme-icarus-1/"},{"title":"Hexo | Pages服务速度对比","text":"当我们在本地调试好了博客内容，就需要发布到公网上让更多的人看见我们的辛（wu）苦（liao）\b劳动。网上比较多的是通过 Hexo + Github 来部署自己的博客：通过 Hexo 渲染静态文件，推送到 Github ，借助 Pages 服务来实现博客外部访问。国内的同学们有时候会遇到加载速度较慢的问题，因此我们需要选择一套更好的方案。 提供 Pages 服务的代码托管平台\b国内外提供代码托管的平台非常多，\b其中提供 Pages 服务的主要有： Github 大名鼎鼎的全球同性交友平台 Gitlab Gitee 开源中国旗下的码云 Coding 现在升级为腾讯云代码托管平台 Gitlab 十分特别，它提供的 Pages 服务\b需要用户将构建命令以文件（.gitlab-ci.yml）的形式存储在云端，Gitlab 使用内建工具 GitLab CI/CD 生成静态文件并发布。也就是说，Gitlab 这个方案需要我们把 Hexo 博客整个工程托管在 Gitlab。该方法和其他方法差异较大，因此在下面的文章中，这种方案就不做介绍了。 多仓库部署Hexo 允许用户同时将博客部署在多个仓库中，只需要在博客的 _config.yml 中配置： /_config.yml1234567deploy: type: git repository: github: https://github.com/Username/Username.github.io.git gitee: https://gitee.com/Username/Username.git coding: https://git.dev.tencent.com/Username/Username.git branch: master 把几个代码托管平台的 Pages 服务设置好，每次只需执行一次 hexo d 就可以将静态页面同时部署在多个平台上。下面我们来一起对比一下这几个平台 Pages 服务的速度。 速度对比首先将博客同时部署在 Github 、 Gitee 和 Coding 上: https://susreal.github.io https://susreal.gitee.io https://susreal.coding.me 网络环境分别采用移动、联通和电信以及美国节点，通过 ping 域名的方式统计网络延迟： 取连续20条延迟的平均值（仅供参考）： - 移动 联通 电信 美国节点 Github 131ms 388ms 245ms 139ms Gitee 22ms 92ms 97ms 59ms Coding 97ms 62ms 584ms 927ms 可以看到，在移动、电信以及美国节点的网络下，Gitee 的访问速度都表现出了明显的优势。测试过程中，Coding 的服务器一度timeout，无法连接。从 Coding 官方的说明来看，由于 Pages 服务\b可以自定义绑定域名，为了实现“免备案”，Coding 把服务器架在了海外，这也可以解释为何 Coding 的访问速度以及访问稳定性稍显逊色。 自定义域名绑定这三个代码托管平台都支持自定义域名绑定，我们可以在万网上购买域名，并解析到对应的平台上。\b首先，我们在 Hexo 工程的 source 目录下添加一个 CNAME 文件（没有后缀名），把购买的域名写在文件中： /source/CNAME1susreal.com GithubGithub 在 仓库&gt;Settings&gt;GitHub Pages 中绑定域名： 然后在域名的解析中添加两条 CNAME 类型的解析即可： GiteeGitee 的自定义域名需要开启 Gitee Pages Pro 服务，这里划重点，这个服务需要 99 \b元一年！ 如果不开启的话，是无法绑定自定义域名的。我这里是先试用了一个月： \b如果开启强制 https 访问的话需要自己配置\b域名证书，证书是免费的，有效期一年。 最后是同样的一步，在域名解析中添加 CNAME 类型的解析： CodingCoding 的绑定域名服务是全免费的，并且可以申请由 Let’s Encrypt 下发的免费SSL证书，有效期三个月： 总结国内外这三个代码托管平台提供的 Pages 服务，从体验上来看都不错，可以帮助博主快速建站。从网络连接上来看，开源中国下的 Gitee 应该是表现最好的。\b如果需要绑定自己的域名，Gitee 需要额外支付每年 99 元的服务费，考虑到绑定自己的域名以及访问速度两个因素，我个人觉得还是值得的。","link":"/article/2019/hexo-speed-test/"},{"title":"Hexo | 两个你可能会用到的icarus主题配置","text":"开始折腾hexo也差不多有一个多礼拜了，icarus主题整体来讲还是非常棒的，集成的评论、捐赠插件都很全很完整。 但毕竟众口难调，每个博主都有些定制化的需求，就会有一些没满足的功能。这里整理了我在建站过程中真实遇到的问题，希望对也在用icarus主题的同学们有所帮助。 一、文章置顶博客默认是按照创建时间倒序排列的，有的时候我们希望可以置顶一些文章，icarus没有提供这个功能，因此我们还是需要进行一些改造。 实现的效果是：写文章的时候在front-matter区域\b定义文章的权重（top），如果top的数值大于0，则将该文章置顶，并展示置顶标签。 第一步，添加top属性在根目录的config文件中 /_config.yml123456index_generator: path: '' per_page: 10 order_by: top: -1 date: -1 \b第二步，修改generator.js，主要是在生成html代码时优先按照top排序 /‎⁨node_modules⁩/hexo-generator-index⁩/lib⁩/generator.js12345678910111213141516171819var paginationDir = config.pagination_dir || 'page';// added codeposts.data = posts.data.sort(function(a, b) {if(a.top &amp;&amp; b.top) { if(a.top == b.top) return b.date - a.date; else return b.top - a.top;}else if(a.top &amp;&amp; !b.top) { return -1;}else if(!a.top &amp;&amp; b.top) { return 1;}else return b.date - a.date;});// endvar path = config.index_generator.path || ''; 第三步，修改模板中的post.md，添加top属性并设置默认值为0 /scaffolds/post.md123456---title: {{ title }}date: {{ date }}tags:top: 0--- 最后，根据大家自己的喜好在前端添加标签咯~ /themes/icarus/layout/common/article.ejs1234&lt;% if (post.top&gt;0) { %&gt;&lt;i class=\"fas fa-arrow-alt-circle-up\" style=\"color:#3273dc\"&gt;&lt;/i&gt;&lt;span class=\"level-item\" style=\"color:#3273dc\"&gt;&amp;nbsp;置顶&lt;/span&gt;&lt;% } %&gt; 最后的效果如图，蓝色的置顶标签就是了： 二、添加阅读统计valine插件在1.2.0版本之后提供了文章阅读量统计的功能，好处是可以通过leancloud后台的可视化界面看到数据。目前只支持文章PV的统计，添加方式非常简单： 在config文件中添加valine的visitor属性 修改valine的加载文件valine.ejs，添加visitor字段的加载 根据想添加统计的展示位置，例如文章尾部，添加前端代码 具体的操作可以参考valine官方文档，这里不多介绍了。我用的是更加简单方便的busuanzi进行统计： 第一步，在icarus主题的head.ejs中添加脚本 /themes/icarus/layout/common/head.ejs123&lt;% if (has_config('visit')) { %&gt;&lt;script async=\"\" src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;&lt;/script&gt;&lt;% } %&gt; 第二步，在网页footer里面统计站点的UV和PV /themes/icarus/layout/common/footer.ejs123456789&lt;span id=\"busuanzi_container_site_uv\"&gt; ❤️ 感谢 &lt;span id=\"busuanzi_value_site_uv\"&gt;0&lt;/span&gt; 位小伙伴的&lt;/span&gt;&lt;span id=\"busuanzi_container_site_pv\"&gt; &lt;span id=\"busuanzi_value_site_pv\"&gt;0&lt;/span&gt; 次陪伴&lt;/span&gt; 第三步，在每篇文章article里面统计阅读量PV，主页不显示 /themes/icarus/layout/common/article.ejs123456789&lt;div class=\"level is-size-7 has-text-grey\"&gt; &lt;div class=\"level-left\"&gt; &lt;i class=\"far fa-eye\"&gt;&lt;/i&gt; &lt;span&gt;&amp;nbsp;&lt;/span&gt; &lt;span id=\"busuanzi_container_page_pv\" style=\"display: inline;\"&gt; &lt;span id=\"busuanzi_value_page_pv\"&gt;0&lt;/span&gt; &lt;/span&gt; &lt;/div&gt;&lt;/div&gt; 效果大家在这个页面就可以找到啦~ 不过需要注意的是，busuanzi统计UV的逻辑是根据浏览器请求的cookie，不是严格意义上的设备唯一标识。逻辑严谨什么的并不重要，有人气才是关键对吧！ (๑•ㅂ•́)و✧ 参考：https://www.jianshu.com/p/42a4efcdf8d7","link":"/article/2019/hexo-theme-icarus-2/"}],"tags":[{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"腾讯云","slug":"腾讯云","link":"/tags/腾讯云/"},{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"},{"name":"FreeTalk","slug":"FreeTalk","link":"/tags/FreeTalk/"},{"name":"Node.js","slug":"Node-js","link":"/tags/Node-js/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"Pages","slug":"Pages","link":"/tags/Pages/"}],"categories":[{"name":"Coder","slug":"Coder","link":"/categories/Coder/"},{"name":"FreeTalk","slug":"FreeTalk","link":"/categories/FreeTalk/"},{"name":"Hexo","slug":"Coder/Hexo","link":"/categories/Coder/Hexo/"}]}